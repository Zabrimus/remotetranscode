diff --git a/src/addonhandler.cpp b/src/addonhandler.cpp
index 49a9527..e257b5e 100644
--- a/src/addonhandler.cpp
+++ b/src/addonhandler.cpp
@@ -342,6 +342,27 @@ std::string path;
         return demux;
     }
 
+    void AddonHandler::DenuxReset() {
+        if (!kodi.inputstream->toAddon->demux_reset) // does lib provide this function
+            return;
+
+        kodi.inputstream->toAddon->demux_reset(kodi.inputstream);
+    }
+
+    void AddonHandler::DenuxAbort() {
+        if (!kodi.inputstream->toAddon->demux_abort) // does lib provide this function
+            return;
+
+        kodi.inputstream->toAddon->demux_abort(kodi.inputstream);
+    }
+
+    void AddonHandler::DenuxSetSpeed(int speed) {
+        if (!kodi.inputstream->toAddon->demux_set_speed) // does lib provide this function
+            return;
+
+        kodi.inputstream->toAddon->demux_set_speed(kodi.inputstream, speed);
+    }
+
     int AddonHandler::Read(uint8_t* buf, int buf_size)
     {
         if (!kodi.inputstream->toAddon->read_stream)
@@ -374,6 +395,82 @@ std::string path;
         return kodi.inputstream->toAddon->seek_stream(kodi.inputstream, position, whence);
     }
 
+    bool AddonHandler::PosTime(int ms) {
+        return kodi.inputstream->toAddon->pos_time(kodi.inputstream, ms);
+    }
+
+    int64_t AddonHandler::PositionStream() {
+        return kodi.inputstream->toAddon->position_stream(kodi.inputstream);
+    }
+
+    int64_t AddonHandler::LengthStream() {
+        return kodi.inputstream->toAddon->length_stream(kodi.inputstream);
+    }
+
+    bool AddonHandler::IsRealTimeStream() {
+        return kodi.inputstream->toAddon->is_real_time_stream(kodi.inputstream);
+    }
+
+    bool AddonHandler::SeekTime(double time, bool backwards, double *startpts) {
+        return kodi.inputstream->toAddon->demux_seek_time(kodi.inputstream, time, backwards, startpts);
+    }
+
+    const char* AddonHandler::GetPathList() {
+        if (!kodi.inputstream->toAddon->get_path_list) // does lib provide this function
+            return nullptr;
+
+        return kodi.inputstream->toAddon->get_path_list(kodi.inputstream);
+    }
+
+    bool AddonHandler::GetTimes(struct INPUTSTREAM_TIMES* times) {
+        if (!kodi.inputstream->toAddon->get_times) // does lib provide this function
+            return false;
+
+        return kodi.inputstream->toAddon->get_times(kodi.inputstream, times);
+    }
+
+    int AddonHandler::GetChapter() {
+        if (!kodi.inputstream->toAddon->get_chapter) // does lib provide this function
+            return -1;
+
+        return kodi.inputstream->toAddon->get_chapter(kodi.inputstream);
+    }
+
+    int AddonHandler::GetChapterCount() {
+        if (!kodi.inputstream->toAddon->get_chapter_count) // does lib provide this function
+            return -1;
+
+        return kodi.inputstream->toAddon->get_chapter_count(kodi.inputstream);
+    }
+
+    const char* AddonHandler::GetChapterName(int ch) {
+        if (!kodi.inputstream->toAddon->get_chapter_name) // does lib provide this function
+            return nullptr;
+
+        return kodi.inputstream->toAddon->get_chapter_name(kodi.inputstream, ch);
+    }
+
+    int64_t AddonHandler::GetChapterPos(int ch) {
+        if (!kodi.inputstream->toAddon->get_chapter_pos) // does lib provide this function
+            return -1;
+
+        return kodi.inputstream->toAddon->get_chapter_pos(kodi.inputstream, ch);
+    }
+
+    bool AddonHandler::SeekChapter(int ch) {
+        if (!kodi.inputstream->toAddon->seek_chapter) // does lib provide this function
+            return -1;
+
+        return kodi.inputstream->toAddon->seek_chapter(kodi.inputstream, ch);
+    }
+
+    int AddonHandler::BlockSizeStream() {
+        if (!kodi.inputstream->toAddon->block_size_stream) // does lib provide this function
+            return false;
+
+        return kodi.inputstream->toAddon->block_size_stream(kodi.inputstream);
+    }
+
     char * AddonHandler::get_user_path(void * kodiBase) {
         char *c = strdup(path.c_str());
         return c;
@@ -396,6 +493,4 @@ std::string path;
 
     int AddonHandler::LoadXML(std::string xmlfile) {
         return ReadXML(xmlfile.c_str());
-    }
-    
-
+    }
\ No newline at end of file
diff --git a/src/addonhandler.h b/src/addonhandler.h
index bd740fd..750da3d 100644
--- a/src/addonhandler.h
+++ b/src/addonhandler.h
@@ -18,6 +18,7 @@ extern "C" {
 #define DMX_SPECIALID_STREAMCHANGE -11
 
 extern bool verbose;
+extern bool saveonly;
 extern struct INPUTSTREAM_IDS IDs;
 
 class AddonHandler
@@ -59,5 +60,21 @@ public:
     int GetTotalTime(int streamID, bool enable);
     int GetTime();
     int64_t SeekStream(int64_t position, int whence);
+    bool PosTime(int ms);
 
+    int64_t PositionStream();
+    int64_t LengthStream();
+    bool IsRealTimeStream();
+    bool SeekTime(double time, bool backwards, double* startpts);
+    void DenuxReset();
+    void DenuxAbort();
+    void DenuxSetSpeed(int speed);
+    const char *GetPathList();
+    bool GetTimes(INPUTSTREAM_TIMES *times);
+    int GetChapter();
+    int GetChapterCount();
+    const char *GetChapterName(int ch);
+    int64_t GetChapterPos(int ch);
+    bool SeekChapter(int ch);
+    int BlockSizeStream();
 };
diff --git a/src/streamplayer.cpp b/src/streamplayer.cpp
index ed63fbe..afe4675 100644
--- a/src/streamplayer.cpp
+++ b/src/streamplayer.cpp
@@ -11,6 +11,7 @@
 #include <netdb.h> 
 #include <fcntl.h>
 #include <thread>
+#include <stdio.h>
 
 #include "mpegts/mpegts_muxer.h"
 #include "circular_buffer.hpp"
@@ -26,6 +27,7 @@ extern "C" {
 }
 
 bool verbose = false;
+bool saveonly = false;
 
 #include "bitstreamconverter.h"
 #include "audioconverter.h"
@@ -81,7 +83,6 @@ static inline uint64_t GetusTicks(void) {
 
 
 std::string headers = "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML. like Gecko) Chrome/116.0.0.0&Content-Type=application/octet-stream";
-int sockfd;
 typedef struct {
         uint8_t *data;
         int size;
@@ -89,19 +90,14 @@ typedef struct {
 } cbuf;
 
 void sendpacket(uint8_t *p,int size) {
-    int n = 0;
-    do {
-        ssize_t r = write(sockfd,p,size);
-        //if (r != size) printf("sendpacket only %d\n",r);
-        if (r < 0) {
-            usleep(10);
-            //printf("failure write %d\n",r);
-        }
-        else {
-            n += r;
-        }
-        
-    } while (n < size);
+    if (saveonly) {
+        FILE* f = fopen("stream_debug.ts", "a");
+        fwrite(p, size, 1, f);
+        fclose(f);
+    } else {
+        // print to stdout
+        write(1, p, size);
+    }
 }
 
 // create Ringbuffer for output buffer
@@ -109,10 +105,10 @@ circular_buffer<cbuf, 100> rbuf;
 
 //A callback where all the TS-packets are sent from the multiplexer
 void muxOutput(mpegts::SimpleBuffer &rTsOutBuffer, uint8_t tag){
-    static int startbuffer = 20;    
+    static int startbuffer = 20;
     cbuf buf;
     if (rTsOutBuffer.size() % 188) {
-        printf("packetsize wrong\n");
+        fprintf(stderr, "packetsize wrong\n");
         return;
     }
     if (startbuffer > 0) {                  // Buffer first 20 packets
@@ -136,7 +132,8 @@ void muxOutput(mpegts::SimpleBuffer &rTsOutBuffer, uint8_t tag){
 }
 
 
-StreamPlayer::StreamPlayer(int portnr) {
+StreamPlayer::StreamPlayer(int position) {
+    startPosition = position;
 
     // Prepare NALU AUD
     NALUHeader.sync[0] = 0;
@@ -145,35 +142,6 @@ StreamPlayer::StreamPlayer(int portnr) {
     NALUHeader.sync[3] = 1;
     NALUHeader.nalu = 9;
     NALUHeader.length[0] = 0x10;
-    
-        // Open output Socket
-    sockfd = socket(AF_INET, SOCK_STREAM, 0);
-        
-    if (sockfd < 0) {
-        printf("ERROR opening socket\n");
-        exit(0);
-    }
-
-    server = gethostbyname("127.0.0.1");
-    if (server == NULL) {
-        fprintf(stderr,"ERROR, no such host\n");
-        exit(0);
-    }
-    
-    bzero((char *) &serv_addr, sizeof(serv_addr));
-    serv_addr.sin_family = AF_INET;
-    bcopy((char *)server->h_addr, 
-        (char *)&serv_addr.sin_addr.s_addr,
-        server->h_length);
-    serv_addr.sin_port = htons(portnr);
-
-    int flags = fcntl(sockfd, F_GETFL);
-    fcntl(sockfd, F_SETFL, flags&~SOCK_NONBLOCK);
-
-    if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) {
-        printf("ERROR connecting\n");
-        exit(0);
-    }
 
     //Create the map defining what datatype to map to what PID
     std::map<uint8_t, int> streamPidMap;
@@ -185,14 +153,11 @@ StreamPlayer::StreamPlayer(int portnr) {
 
     //Provide the callback where TS packets are fed to
     lMuxer->tsOutCallback = std::bind(&muxOutput, std::placeholders::_1,std::placeholders::_2);
-
-
 };
 
 StreamPlayer::~StreamPlayer() {
     if (m_thread.joinable())
-        m_thread.join();  
-    close(sockfd);
+        m_thread.join();
 };
 #if 0
 void StreamPlayer::send_packet(uint8_t *p,int size) {
@@ -255,17 +220,17 @@ void StreamPlayer::StreamPlay(AddonHandler *h) {
     
     //m_thread = std::thread (&StreamPlayer::Send_thread,this);
 
-    if (verbose) printf("Sucessfull opened Addon\n");
+    if (verbose) fprintf(stderr, "Sucessfull opened Addon\n");
     h->GetCapabilities();
     
     if (h->GetStreamIDs()) {
         BitstreamConverterInit();
-        if (verbose) printf("Streamcount %d\n",IDs.m_streamCount);
+        if (verbose) fprintf(stderr, "Streamcount %d\n",IDs.m_streamCount);
         for (int i=0;i<IDs.m_streamCount;i++) {
-            if (verbose) printf("No. ID%d %d\n",i,IDs.m_streamIds[i]);
+            if (verbose) fprintf(stderr, "No. ID%d %d\n",i,IDs.m_streamIds[i]);
             h->GetStream(IDs.m_streamIds[i]);   // Build ID Table:
         }
-        if (verbose) printf("\n\n");
+        if (verbose) fprintf(stderr, "\n\n");
         h->SelectStreams(&VideoID,&AudioID);
         
         h->EnableStream(IDs.m_streamIds[VideoID],true);  // Enable Video Stream
@@ -277,6 +242,8 @@ void StreamPlayer::StreamPlay(AddonHandler *h) {
         h->GetStream(IDs.m_streamIds[VideoID]);  // Trigger start
         h->GetStream(IDs.m_streamIds[AudioID]);
 
+        h->PosTime(startPosition * 1000);
+
         mpegts::EsFrame esFrame;
         
         do {
@@ -286,9 +253,9 @@ void StreamPlayer::StreamPlay(AddonHandler *h) {
                         
             if (demux) {
 
-                //printf("PTS %f Disptime %d StreamId %p\n",demux->pts,demux->duration,demux->iStreamId);
+                // printf("PTS %f Disptime %d StreamId %p\n",demux->pts,demux->duration,demux->iStreamId);
                 if (demux->iStreamId == DMX_SPECIALID_STREAMCHANGE) {
-                    if (verbose) printf("STREAMCHANGE DETECTED Size \n");
+                    if (verbose) fprintf(stderr, "STREAMCHANGE DETECTED Size \n");
                     
                     CBitstreamConverterClose();
                     h->OpenStream(IDs.m_streamIds[ID]);
diff --git a/src/streamplayer.h b/src/streamplayer.h
index 0bace14..12168bf 100644
--- a/src/streamplayer.h
+++ b/src/streamplayer.h
@@ -27,6 +27,7 @@ private:
     bool makepmt = true;
     mpegts::MpegTsMuxer *lMuxer;
 
+    int startPosition;
     
     int duration;  // Duration of one Frame in ms
 
@@ -39,7 +40,7 @@ private:
 
 public:
 
-    StreamPlayer(int );
+    StreamPlayer(int position);
     ~StreamPlayer();
     
     void send_packet(uint8_t *,int);
